================================================================================
ZENTRO HOMES - FRONTEND INTEGRATION GUIDE
================================================================================
How to Access Images, Database, and Media for Frontend Development

This document explains the backend architecture, storage paths, database logic,
and API endpoints that a frontend programming agent needs to understand to
properly integrate with the Zentro Homes admin system.

================================================================================
1. DATABASE CONNECTION AND SETUP
================================================================================

DATABASE TYPE: PostgreSQL (Railway.app hosted)
CONNECTION STRING: process.env.DATABASE_URL (Railway provides this)

Key Connection Logic:
-------------------
Location: /server.js lines 14-31, /routes/admin.js lines 10-13

const { Pool } = require('pg');
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
  max: 20,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 2000,
});

// Test connection
pool.connect((err, client, release) => {
  if (err) {
    console.error('Error acquiring client:', err.stack);
  } else {
    console.log('✅ Connected to Railway PostgreSQL database');
    release();
  }
});

================================================================================
2. IMAGE STORAGE ARCHITECTURE
================================================================================

STORAGE TYPE: Railway Volume Mount (Persistent File Storage)
UPLOAD PATH: process.env.RAILWAY_VOLUME_MOUNT_PATH || '/uploads'
MULTER CONFIG: Located in /routes/admin.js lines 15-52

Image Storage Flow:
------------------
1. Images uploaded via admin panel → Multer processes them
2. Files stored in Railway volume at: RAILWAY_VOLUME_MOUNT_PATH/[filename]
3. Database stores image metadata in JSONB format
4. Public access via static route: /uploads/[filename]

Multer Configuration:
--------------------
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, uploadPath); // Railway volume path
  },
  filename: function (req, file, cb) {
    // Generate unique filename: [name]-[timestamp]-[random].[ext]
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    const ext = path.extname(file.originalname);
    const name = path.basename(file.originalname, ext);
    cb(null, `${name}-${uniqueSuffix}${ext}`);
  }
});

File Serving:
------------
Location: /server.js lines 115-121
app.use('/uploads', express.static(uploadPath, {
  maxAge: process.env.NODE_ENV === 'production' ? '1d' : '1h',
  etag: true,
  lastModified: true
}));

================================================================================
3. DATABASE SCHEMA FOR IMAGES AND MEDIA
================================================================================

TABLE: properties
IMAGES FIELD: images (JSONB) - Stores array of image objects
YOUTUBE FIELD: virtual_tour_url (TEXT) - Stores YouTube/video URLs

Image Data Structure in Database:
--------------------------------
The 'images' JSONB field stores an array like this:

[
  {
    "url": "/uploads/apartment-1234567890-987654321.jpg",
    "alt": "Property Name - Main Image",
    "isPrimary": true,
    "displayOrder": 0,
    "fileSize": 2048576,
    "mimeType": "image/jpeg"
  },
  {
    "url": "/uploads/apartment-1234567890-987654322.jpg", 
    "alt": "Property Name - Gallery Image 2",
    "isPrimary": false,
    "displayOrder": 1,
    "fileSize": 1856432,
    "mimeType": "image/jpeg"
  }
]

Main Image Extraction:
---------------------
SQL Query extracts first image as main_image:
(images->0->>'url') as main_image

Complete Database Schema:
------------------------
Key fields for frontend consumption:

- id: INTEGER (Primary key)
- title: VARCHAR(255) (Property name)
- type: VARCHAR(50) (Villa, Apartment, Penthouse, Condo)
- status: VARCHAR(20) (For Sale, For Rent)
- price: BIGINT (Price in KES)
- currency: VARCHAR(3) (Default: KES)
- location_area: VARCHAR(100) (Neighborhood)
- location_city: VARCHAR(100) (City)
- bedrooms: INTEGER
- bathrooms: INTEGER
- size: INTEGER (Square meters)
- description: TEXT (Full description)
- images: JSONB (Image array - see structure above)
- virtual_tour_url: TEXT (YouTube/video URLs)
- amenities: JSONB (Array of amenities)
- available: BOOLEAN
- featured: BOOLEAN
- published: BOOLEAN

================================================================================
4. API ENDPOINTS FOR FRONTEND ACCESS
================================================================================

PUBLIC PROPERTY ENDPOINTS:
-------------------------
Location: /routes/properties.js (if exists) or create these:

GET /api/properties
- Returns all published properties
- Includes main_image extracted from JSONB
- Filters: ?type=Villa&status=For Sale&featured=true

GET /api/properties/:id  
- Returns single property with full details
- Includes complete images array and virtual_tour_url

ADMIN ENDPOINTS (Require Authentication):
----------------------------------------
Location: /routes/admin.js

GET /api/admin/properties
- Returns all properties (including unpublished)
- Headers: Authorization: Bearer [JWT_TOKEN]

GET /api/admin/properties/:id
- Returns complete property details for editing
- Headers: Authorization: Bearer [JWT_TOKEN]

EXAMPLE API RESPONSE:
--------------------
{
  "id": 2,
  "title": "Ngong Road Luxury Apartment",
  "type": "Apartment", 
  "status": "For Sale",
  "price": 16780000,
  "currency": "KES",
  "location_area": "Kilimani",
  "location_city": "Nairobi",
  "bedrooms": 12,
  "bathrooms": 1,
  "size": 119,
  "description": "Beautiful modern apartment...",
  "images": [
    {
      "url": "/uploads/apartment-1704123456-789012345.jpg",
      "alt": "Ngong Road Luxury Apartment - Main Image", 
      "isPrimary": true,
      "displayOrder": 0
    }
  ],
  "virtual_tour_url": "https://youtube.com/watch?v=xyz123",
  "amenities": ["swimming pool", "gym", "security", "garden"],
  "main_image": "/uploads/apartment-1704123456-789012345.jpg",
  "available": true,
  "featured": false,
  "published": true,
  "created_at": "2025-01-01T12:00:00Z"
}

================================================================================
5. FRONTEND IMAGE ACCESS PATTERNS
================================================================================

ACCESSING PROPERTY IMAGES:
--------------------------

Option 1: Use main_image field (recommended for listings)
const imageUrl = `${API_BASE_URL}${property.main_image}`;
// Results in: https://your-site.com/uploads/apartment-123.jpg

Option 2: Use images array (for galleries/detail pages)
property.images.forEach(image => {
  const imageUrl = `${API_BASE_URL}${image.url}`;
  const isPrimary = image.isPrimary;
  const altText = image.alt;
});

Option 3: Handle both formats (defensive programming)
const getPropertyImage = (property) => {
  // Try main_image first
  if (property.main_image) {
    return `${API_BASE_URL}${property.main_image}`;
  }
  
  // Fall back to first image in array
  if (property.images && property.images.length > 0) {
    return `${API_BASE_URL}${property.images[0].url}`;
  }
  
  // Fallback to placeholder
  return '/assets/images/property-placeholder.jpg';
};

ACCESSING YOUTUBE VIDEOS:
-------------------------
const youtubeUrl = property.virtual_tour_url;
if (youtubeUrl) {
  // Extract video ID for embedding
  const videoId = youtubeUrl.match(/(?:youtube\.com\/watch\?v=|youtu\.be\/)([^&\n?#]+)/)?.[1];
  const embedUrl = `https://www.youtube.com/embed/${videoId}`;
}

================================================================================
6. FRONTEND API CLIENT EXAMPLE
================================================================================

JavaScript Frontend Client:
---------------------------

class PropertyAPI {
  constructor(baseURL = 'https://your-site.com') {
    this.baseURL = baseURL;
  }

  // Get all published properties for public site
  async getPublishedProperties(filters = {}) {
    const queryParams = new URLSearchParams({
      published: 'true',
      available: 'true',
      ...filters
    });
    
    const response = await fetch(`${this.baseURL}/api/properties?${queryParams}`);
    return response.json();
  }

  // Get single property details
  async getPropertyDetails(id) {
    const response = await fetch(`${this.baseURL}/api/properties/${id}`);
    return response.json();
  }

  // Get featured properties for homepage
  async getFeaturedProperties() {
    return this.getPublishedProperties({ featured: 'true' });
  }

  // Get properties by type
  async getPropertiesByType(type) {
    return this.getPublishedProperties({ type });
  }

  // Helper: Get property image URL
  getImageUrl(property, size = 'full') {
    const imageUrl = property.main_image || 
                    (property.images?.[0]?.url) || 
                    '/assets/images/placeholder.jpg';
    
    return imageUrl.startsWith('http') ? imageUrl : `${this.baseURL}${imageUrl}`;
  }

  // Helper: Get YouTube embed URL
  getYouTubeEmbedUrl(property) {
    if (!property.virtual_tour_url) return null;
    
    const videoId = property.virtual_tour_url.match(
      /(?:youtube\.com\/watch\?v=|youtu\.be\/)([^&\n?#]+)/
    )?.[1];
    
    return videoId ? `https://www.youtube.com/embed/${videoId}` : null;
  }
}

Usage Example:
--------------
const api = new PropertyAPI();

// Homepage featured properties
const featuredProperties = await api.getFeaturedProperties();
featuredProperties.forEach(property => {
  const imageUrl = api.getImageUrl(property);
  const youtubeUrl = api.getYouTubeEmbedUrl(property);
  
  console.log(`Property: ${property.title}`);
  console.log(`Image: ${imageUrl}`);
  console.log(`Video: ${youtubeUrl || 'No video'}`);
});

================================================================================
7. ERROR HANDLING AND FALLBACKS
================================================================================

Image Loading Failures:
-----------------------
// Always provide fallbacks for missing images
<img 
  src={api.getImageUrl(property)} 
  alt={property.title}
  onError={(e) => {
    e.target.src = '/assets/images/property-placeholder.jpg';
  }}
  loading="lazy"
/>

API Error Handling:
------------------
try {
  const properties = await api.getPublishedProperties();
} catch (error) {
  console.error('Failed to load properties:', error);
  // Show fallback UI or cached data
}

================================================================================
8. PERFORMANCE CONSIDERATIONS
================================================================================

Image Optimization:
------------------
- Images are served with proper cache headers (1 day in production)
- Use lazy loading for property galleries
- Consider image resizing service for thumbnails
- Railway volume storage provides fast access

Database Optimization:
---------------------
- Main image is extracted via SQL for fast listing queries
- JSONB fields are indexed for performance
- Properties table has indexes on common filter fields

Caching Strategy:
----------------
- Implement browser caching for property lists
- Use CDN for static images if scaling globally
- Consider Redis caching for frequently accessed properties

================================================================================
9. SECURITY CONSIDERATIONS
================================================================================

Public Access:
-------------
- Only published and available properties should be shown on frontend
- Always filter by published=true and available=true
- Admin endpoints require JWT authentication

File Security:
-------------
- Images are served from Railway volume (secure)
- No direct file system access from frontend
- Filename obfuscation prevents enumeration attacks

API Security:
------------
- Rate limiting implemented on API routes
- CORS configured for allowed domains
- Input validation on all parameters

================================================================================
10. DEBUGGING AND MONITORING
================================================================================

Console Debugging:
-----------------
The admin system includes comprehensive logging:
- Image processing times
- Database query performance
- File upload success/failure
- API response times

Key Debug Patterns:
------------------
console.log('⏱️ DEBUG: Image processing took Xms');
console.log('✅ Image loaded for property ID');
console.log('❌ Image failed for property ID');

Monitor These Metrics:
---------------------
- Average image load time
- Database connection pool usage
- Failed image requests
- API response times

================================================================================
QUICK REFERENCE SUMMARY
================================================================================

🗄️  DATABASE: PostgreSQL (Railway) → properties table
🖼️  IMAGES: Railway volume → /uploads/[filename] → JSONB array in DB
🎬 YOUTUBE: virtual_tour_url field → TEXT field in DB  
🔗 API: /api/properties (public) → JSON with main_image + images array
📁 FILES: Static serving → /uploads/[filename] → Browser accessible
🔐 AUTH: Admin routes need JWT → Public routes open access

Frontend developers should:
1. Use /api/properties for public property listings
2. Access images via property.main_image or property.images[0].url  
3. Prefix image URLs with site domain: ${API_BASE_URL}${imageUrl}
4. Handle YouTube URLs via property.virtual_tour_url
5. Always provide image fallbacks for missing files
6. Implement proper error handling for API failures

For additional technical details, see:
- /routes/admin.js (Backend API logic)
- /server.js (Server setup and static file serving)  
- /railway_database_schema.sql (Complete database structure)
- /zentrohomes.com/admin/js/admin.js (Frontend implementation examples)